var searchIndex = JSON.parse('{\
"__TOC":{"doc":"Table of contents","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"dijkstra":{"doc":"Performs Dijkstra’s algorithm.","t":[5],"n":["costs"],"q":["dijkstra"],"d":["Computes costs for each node."],"i":[0],"f":[[[]]],"p":[]},\
"fastout":{"doc":"","t":[23],"n":["fastout"],"q":["fastout"],"d":[""],"i":[0],"f":[null],"p":[]},\
"gcd":{"doc":"Calculates a Greatest Common Divisor (GCD).","t":[5],"n":["gcd"],"q":["gcd"],"d":["Calculates a Greatest Common Divisor (GCD)."],"i":[0],"f":[[[["u64",15]],["u64",15]]],"p":[]},\
"input":{"doc":"Provides <code>input!</code> macro.","t":[4,16,8,4,11,11,11,11,5,11,11,14,11,11,10,11,11,11,11,11,11,11,11,5],"n":["Bytes","Output","Readable","Usize1","borrow","borrow","borrow_mut","borrow_mut","bytes","from","from","input","into","into","read","read","read","try_from","try_from","try_into","try_into","type_id","type_id","usize1"],"q":["input","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Reads a string as <code>Vec<u8></code>.","","A trait representing which type can be read.","1-based index.","","","","","","","","A <code>input!</code> macro.","","","","","","","","","","","",""],"i":[0,1,0,0,2,3,2,3,0,2,3,0,2,3,1,2,3,2,3,2,3,2,3,0],"f":[null,null,null,null,[[]],[[]],[[]],[[]],[[["string",3]],[["vec",3],["u8",15]]],[[]],[[]],null,[[]],[[]],[[["fnmut",8]]],[[["fnmut",8]],["usize",15]],[[["fnmut",8]],[["vec",3],["u8",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["usize",15]]],"p":[[8,"Readable"],[4,"Usize1"],[4,"Bytes"]]},\
"miller_rabin":{"doc":"Performs Miller-Rabin test.","t":[5],"n":["is_prime"],"q":["miller_rabin"],"d":["Performs Miller-Rabin test."],"i":[0],"f":[[[["u64",15]],["bool",15]]],"p":[]},\
"montmort_number":{"doc":"Computes Montmort numbers.","t":[5],"n":["montmort"],"q":["montmort_number"],"d":["Computes Montmort numbers."],"i":[0],"f":[[[["usize",15]],[["vec",3],["sub",8],["mul",8],["copy",8],["usize",15],["from",8],["add",8]]]],"p":[]},\
"partition_point":{"doc":"Computes the index of the partition point.","t":[16,18,18,18,8,8,8,18,10,11],"n":["Item","MAX_VALUE","MIN_VALUE","ONE","PrimitiveInteger","RangeBoundsExt","SliceExt","ZERO","partition_point","partition_point"],"q":["partition_point","","","","","","","","",""],"d":["","","","","","","","","",""],"i":[1,2,2,2,0,0,0,2,1,3],"f":[null,null,null,null,null,null,null,null,[[],["usize",15]],[[]]],"p":[[8,"SliceExt"],[8,"PrimitiveInteger"],[8,"RangeBoundsExt"]]},\
"rho":{"doc":"Performs Pollard’s rho algorithm.","t":[5],"n":["factorize"],"q":["rho"],"d":["Performs Pollard’s rho algorithm."],"i":[0],"f":[[[["u64",15]],[["vec",3],["u64",15]]]],"p":[]},\
"sieve":{"doc":"A prime sieve.","t":[3,11,11,11,11,11,11,11,11,11,11,11],"n":["Sieve","borrow","borrow_mut","factorize","from","into","is_prime","new","primes","try_from","try_into","type_id"],"q":["sieve","","","","","","","","","","",""],"d":["A prime sieve.","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[["usize",15]],["vec",3]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Sieve"]]},\
"tonelli_shanks":{"doc":"Performs Tonelli–Shanks algorithm.","t":[8,11],"n":["ModIntBaseExt","sqrt"],"q":["tonelli_shanks",""],"d":["Performs Tonelli–Shanks algorithm.","Performs Tonelli–Shanks algorithm."],"i":[0,1],"f":[null,[[],["option",4]]],"p":[[8,"ModIntBaseExt"]]},\
"xorshift":{"doc":"Xorshift.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Xorshift64","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","into_iter","new","next","next_u64","to_owned","try_from","try_into","type_id"],"q":["xorshift","","","","","","","","","","","","","","","",""],"d":["64-bit Xorshift.","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],["xorshift64",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["u64",15],["option",4]]],[[],["u64",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"Xorshift64"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};