name: CI

on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.42.0-x86_64-unknown-linux-gnu
          default: true
          profile: minimal
          components: rustfmt,clippy

      - name: cargo-fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: cargo-fmt (proc-macro/*)
        run: ls ./proc-macros/*/Cargo.toml | xargs -n 1 -I % cargo fmt --manifest-path % -- --check

      - name: cargo-clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace --all-targets --all-features -- -D warnings

      - name: cargo-clippy (proc-macro/*)
        run: ls ./proc-macros/*/Cargo.toml | xargs -n 1 -I % cargo clippy --manifest-path % -- -D warnings

      - name: cargo-test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --no-fail-fast

  verify:
    name: Verify
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup 1.42.0-x86_64-unknown-linux-gnu
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.42.0-x86_64-unknown-linux-gnu
          default: true
          profile: minimal

      - name: Setup stable-x86_64-unknown-linux-gnu
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          default: false
          profile: minimal

      - name: Setup nightly-x86_64-unknown-linux-gnu
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-x86_64-unknown-linux-gnu
          default: false
          profile: minimal

      - name: Setup Python 3.9
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install `oj`
        run: pip install online-judge-tools

      - name: Resolve `cargo-udeps ^0.1`
        id: resolve-version-of-cargo-udeps
        run: |
          import json
          import urllib.request

          PACKAGE_NAME = 'cargo-udeps'
          VERSION_REQ_MAJOR = 0
          VERSION_REQ_MINOR = 1

          with urllib.request.urlopen(f'https://crates.io/api/v1/crates/{PACKAGE_NAME}') as res:
              versions = json.load(res)['versions']
          matched = set()
          for version in versions:
              major, minor, patch_pre_build = version['num'].split('.')
              major, minor = (int(major), int(minor))
              if ((major, VERSION_REQ_MAJOR) == (0, 0) and minor == VERSION_REQ_MINOR or major == VERSION_REQ_MAJOR and minor >= VERSION_REQ_MINOR) and patch_pre_build.isdecimal():
                  matched.add((minor, int(patch_pre_build)))
          if not matched:
              raise RuntimeError(f'No such package: `{PACKAGE_NAME} ^{VERSION_REQ_MAJOR}.{VERSION_REQ_MINOR}`')
          minor, patch = max(matched)
          print(f'::set-output name=version::{VERSION_REQ_MAJOR}.{minor}.{patch}')
        shell: python

      - name: Resolve `cargo-compete ^0.8`
        id: resolve-version-of-cargo-compete
        run: |
          import json
          import urllib.request

          PACKAGE_NAME = 'cargo-compete'
          VERSION_REQ_MAJOR = 0
          VERSION_REQ_MINOR = 8

          with urllib.request.urlopen(f'https://crates.io/api/v1/crates/{PACKAGE_NAME}') as res:
              versions = json.load(res)['versions']
          matched = set()
          for version in versions:
              major, minor, patch_pre_build = version['num'].split('.')
              major, minor = (int(major), int(minor))
              if ((major, VERSION_REQ_MAJOR) == (0, 0) and minor == VERSION_REQ_MINOR or major == VERSION_REQ_MAJOR and minor >= VERSION_REQ_MINOR) and patch_pre_build.isdecimal():
                  matched.add((minor, int(patch_pre_build)))
          if not matched:
              raise RuntimeError(f'No such package: `{PACKAGE_NAME} ^{VERSION_REQ_MAJOR}.{VERSION_REQ_MINOR}`')
          minor, patch = max(matched)
          print(f'::set-output name=version::{VERSION_REQ_MAJOR}.{minor}.{patch}')
        shell: python

      - name: Download cargo-udeps and cargo-compete
        run: |
          version="${{ steps.resolve-version-of-cargo-udeps.outputs.version }}"
          wget "https://github.com/est31/cargo-udeps/releases/download/v$version/cargo-udeps-v$version-x86_64-unknown-linux-gnu.tar.gz"
          tar xzvf "./cargo-udeps-v$version-x86_64-unknown-linux-gnu.tar.gz" -C /tmp/
          echo "/tmp/cargo-udeps-v$version-x86_64-unknown-linux-gnu" >> $GITHUB_PATH

          version="${{ steps.resolve-version-of-cargo-compete.outputs.version }}"
          wget "https://github.com/qryxip/cargo-compete/releases/download/v$version/cargo-compete-v$version-x86_64-unknown-linux-gnu.tar.gz"
          tar xzvf "./cargo-compete-v$version-x86_64-unknown-linux-gnu.tar.gz" -C /tmp/
          echo "/tmp/cargo-compete-v$version-x86_64-unknown-linux-gnu" >> $GITHUB_PATH

      - name: Install cargo-cpl
        uses: actions-rs/cargo@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          command: install
          args: --locked --git https://github.com/qryxip/cargo-cpl

      - name: cargo-cpl
        uses: actions-rs/cargo@v1
        with:
          command: cpl
          args: verify gh-pages
        env:
          RUST_BACKTRACE: full
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
          YUKICODER_API_KEY: ${{ secrets.YUKICODER_API_KEY }}

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: /home/runner/.cache/cargo-cpl/workspace/target/doc
          force_orphan: true
        if: github.ref == 'refs/heads/master'
